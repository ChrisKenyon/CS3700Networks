#!/usr/bin/env python
import random
import sys, socket, select, time, json, random

class Replica:
    def __init__(self, id, replica_ids):
        self.id = id
        self.replica_ids = replica_ids  # ID numbers of other replicas
        self.sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
        self.ELECTION_TIMEOUT = random.randrange(10) #TODO: decide on range for election timeout
        self.TIMEOUT = 2
        self.current_time = 0

    def send_message(self, msg, print_msg=None, set_clock=False):
        sock.send(json.dumps(msg))
        if print_msg:
            print(print_msg)
        if set_clock:
            self.last = time.time()

    def start():
        # Connect to the network. All messages to/from other replicas and clients will
        # occur over this socket
        self.sock.connect(self.id)
        while True:
            ready = select.select([self.sock], [], [], 0.1)[0]

            if self.sock in ready:
                msg_raw = self.sock.recv(32768)

                if len(msg_raw) == 0: continue
                msg = json.loads(msg_raw)

                # For now, ignore get() and put() from clients
                if msg['type'] in ['get', 'put']:
                                pass

                # Handle noop messages. This may be removed from your final implementation
                elif msg['type'] == 'noop':
                    print '%s received a NOOP from %s' % (msg['dst'], msg['src'])

            clock = time.time()
            if clock-last > TIMEOUT:
                # Send a no-op message to a random peer every two seconds, just for fun
                # You definitely want to remove this from your implementation
                msg = {'src': self.id, 'dst': random.choice(self.replica_ids), 'leader': 'FFFF', 'type': 'noop'}
                self.send_message(msg, '{} sending a NOOP to {}'.format(msg['src'], msg['dst']), set_clock=True)
            elif clock-last > ELECTION_TIMEOUT:
                msg = {'src': self.id, 'dst': 'FFFF', 'leader': self.id, 'type': 'elect_request'} #TODO: Change type name
                self.send_message(msg, '{} broadcasting ELECT_REQUEST'.format(msg['src']), set_clock=True)

if __name__=="__main__":
    rep = Replica(sys.argv[1], sys.argv[2:])
    rep.start()