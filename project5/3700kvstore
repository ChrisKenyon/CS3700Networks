#!/usr/bin/env python
import math
import threading
import sys, socket, select, time, json, random

class Server:
    def __init__(self,my_id,replicas):

        self.DEBUG = False
        self.ALL_MSGS = False

        self.my_id = my_id
        self.replica_ids = replicas
        # Connect to the network. All messages to/from other replicas and clients will
        # occur over this socket
        self.sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
        self.sock.connect(my_id)
        # control clock
        self.last_timeout_time = time.time()
        # Current state. Default to follower
        self.switch_to_follower()

        ##### Election ######
        # Election timeout. Begin election.
        # Raft paper/vid seemed to indicate timeout of 150-300ms was good range to avoid split votes
        self.election_timeout = random.randrange(150,300) * 0.01
        self.heartbeat_timeout = 0.025 # 25 milliseconds
        self.elect_lock = threading.Lock()
        self.supporters = []
        self.votes_received = 0
        self.voted_this_term = False

        ##### Persistent States #####
        # Current term that this node thinks it is (default 0)
        self.current_term = 1
        # Candidate that received this term's vote
        self.voted_for = None
        # log entries - contains collections of command for state machine, term when received
        # 1-indexed.   Format: (term, {MID:{key:value}})
        # this format is tentative, but should work as just data considering we only get and put, no delete and etc.
        self.log = [(1,{1:{None:None}})]

        ##### Volatile States #####
        # highest known log entry committed (default 0)
        self.commit_index = 0
        # index of highest log entry applied to state machine
        self.last_applied = 0
        #

        ##### Volatile Leader States #####
        # index of the next log entry to send to each server (default: leader's last log index + 1)
        self.next_indexes = {} # Initialized to commit_index + 1 for each server
        # index of the highest log entry known replicated on a server for each server (default 0)
        self.match_indexes = {rep:0 for rep in self.replica_ids}

        # the data to store after commiting
        self.data = {}
        self.leader = 'FFFF' # TODO this is an indicator for now to say there's no leader at start

    def send_message(self, msg_dict, print_msg=None):
        if self.DEBUG and print_msg:
            print(print_msg)
        msg_dict.update({'leader':self.leader})
        msg_dict.update({'src':self.my_id})
        if self.DEBUG and self.ALL_MSGS:
            print("{}: Sending: {}".format(self.my_id,str(msg_dict)))
        self.sock.send(json.dumps(msg_dict))

    def kick_clock(self):
        self.last_timeout_time = time.time()
        self.election_timeout = random.randrange(150, 300) * 0.01

    def start(self):
        threading.Thread(target=self.timeout_thread).start()
        while True:
            ready = select.select([self.sock], [], [], 0.1)[0]
            if self.sock in ready:
                msg_raw = self.sock.recv(32768)
                if len(msg_raw) == 0: continue
                self.handle_message(msg_raw)

    def timeout_thread(self):
        while True:
            clock = time.time()
            if self.is_leader():
                # heartbeats
                if clock - self.last_heartbeat > self.heartbeat_timeout:
                    # TODO make this where any put requests are sent from. The leader should probably have a request buffer sent rather than just this empty list
                    for replica in self.replica_ids:
                        threading.Thread(target=self.request_vote_rpc, args=(self.current_term, len(self.log), self.log[-1][0]), kwargs={"dst": replica}).start()
                    self.last_heartbeat = time.time()
            # Election clock timeout
            elif clock-self.last_timeout_time > self.election_timeout:
                # Election timeout timed out. Start election campaign
                # This should be the only place current term is incremented, and only updated in handle vote rpc
                self.switch_to_candidate()
                for replica in self.replica_ids:
                    threading.Thread(target=self.request_vote_rpc, args=(self.current_term, len(self.log), self.log[-1][0]), kwargs={"dst": replica}).start()
                self.kick_clock()

    # Because Log is considered 1-indexed but Python lists are 0-indexed. Access log here
    # This is mostly so I don't have to keep calculating/verifying the log index when I'm
    # doing stuff
    # PYTHON LIST INDECES:
    # |0|1|2|3|4|...
    # LOG INDECES:
    # |1|2|3|4|5|...
    def log_get(self, index, end_index=None):
        if index <= 0 or index > len(self.log):
            return None
        if end_index:
            if end_index == -1:
                # go until end
                return self.log[index-1:]
            return self.log[index-1: end_index-1]
        return self.log[index-1]

    def update_term(self, term_value):
        self.current_term = term_value
        self.voted_this_term = False

    '''
        Rule Set
    '''

    ##### All #####
    '''
    If commit_index > last_applied: increment last_applied, apply
        log[last_applied] to state machine
    If RPC request or response contains term T > current_term:
        set current_term = T, convert to follower
    '''
    ##### Followers #####
    '''
    Respond to RPCs from candidates and leaders
    If election timeout elapses without receiving append_entries
        RPC from current leader or granting vote to candidate:
        convert to candidate
    '''
    ##### Candidates #####
    '''
    On conversion to candidate, start election:
    Increment current_term
    Vote for self
    Reset election timer
    Send request_vote_rpc to all other servers
    If votes received from majority of servers: become leader
    If append_entries RPC received from new leader: convert to
        follower
    If election timeout elapses: start new election
    '''
    ##### Leaders ##### TODO most of this
    '''
    Upon election: send initial empty append_entries_rpc
        (heartbeat) to each server; repeat during idle periods to
        prevent election timeouts
    If command received from client: append entry to local log,
        respond after entry applied to state machine
    If last log index >= next_index for a follower: send
        append_entries RPC with log entries starting at next_index
    If successful: update next_index and match_index for
        follower
    If append_entries fails because of log inconsistency:
        decrement next_index and retry
    If there exists an N such that N > commit_index, a majority
        of match_index[i] >= N, and log[N].term == current_term:
        set commit_index = N
    '''


    '''
    Append Entries RPC

    Leader includes index and term of entry in log immediately preceding new entries (nextIndex - 1)
    '''
    def append_entries_rpc(self, entries = [], dst='FFFF'):
        prev_log_index = self.next_indexes[dst] - 1
        prev_log_term = self.current_term
        if prev_log_index < len(self.log):
            prev_log_term = self.log[self.next_indexes[dst]-1][0]
        elif self.commit_index != len(self.log):
            raise Exception("Mismatch Error. Commit index {} < log length {}".format(self.commit_index, len(self.log)))
         
        message = {'src':self.my_id,'dst':dst,'type':'append_entries_rpc',
                   'term':self.current_term,
                   'prev_log_idx':prev_log_index,
                   'prev_log_term':prev_log_term,
                #    'prev_log_idx':len(self.log)-1,
                #    'prev_log_term':self.log[-1][0],
                   'entries':entries,
                   'leader_commit':self.commit_index}

        if self.DEBUG:
            print "sending new entry: "+str(entries)

        self.send_message(message)

    def handle_append_entries_rpc(self,msg_dict):
        '''
        1. Reply false if term < current_term
        2. Reply false if log doesn't contain an entry at prev_log_index
        whose term matches prev_log_term
        3. If an existing entry conflicts with a new one (same index
        but different terms), delete the existing entry and all that
        follow it
        4. Append any new entries not already in the log
        5. If leader_commit > commit_index, set commit_index =
        min(leader_commit, index of last new entry)
        '''
        term = msg_dict.get('term')
        dst = msg_dict.get('src')
        leader = msg_dict.get('leader')
        if self.leader == 'FFFF':
            self.leader = leader
        prev_log_idx = msg_dict.get('prev_log_idx')
        prev_log_term = msg_dict.get('prev_log_term')
        entries = msg_dict.get('entries')
        leader_commit = msg_dict.get('leader_commit')
        return_msg = {'dst':dst,
                      'type':'append_rpc_response',
                      'term':self.current_term,
                      'prev_log_idx':len(self.log),
                      'success':False}
        # Update from heartbeat
        self.kick_clock()

        # Case where current replica is in candidate mode and receives RPC from legitimate leader
        # Case where self is candidate and RPC term < current_term is covered in next if statement
        if self.is_candidate() and term >= self.current_term:
            self.switch_to_follower()

        # Terminating cases
        if (term < self.current_term):
            self.send_message(return_msg)
            return

        # Terminating case
        # 2. No entry at prev_log_idx
        # if prev_log_idx >= len(self.log)
        # 3. Term at prev_log_idx does not match proposed term in entry coming from leader
        # if self.log[prev_log_idx][0]

        # If there is data, loop through list of entries
        for i in range(len(entries)):
            new_entry = entries[i]
            if self.DEBUG:
                print str(self.my_id) + " Follower new entry: " + str(new_entry)
            new_mid = new_entry[1].keys()[0]
            log_mids = [entry[1].keys()[0] for entry in self.log]

            if new_mid in log_mids and self.log[log_mids.index(new_mid)][0] != term: #3 - TODO not sure this is what it means
                self.log = self.log[:log_mids.index(new_mid)] #delete entry and all following
            #4
            self.log.append(new_entry)
            self.prev_log_term = term

            #5
            if leader_commit > self.commit_index:
                self.commit_index = min(leader_commit, len(self.log)-1)
                if self.DEBUG:
                    print str(self.my_id) + " Follower new index: " + str(self.commit_index)
                try:
                    entry_to_commit = self.log[self.commit_index][1].values()[0]
                    self.data[entry_to_commit.keys()[0]]=entry_to_commit.values()[0]
                except IndexError:
                    print("{}. COMMIT_IDX = {}. LEADER_COMMIT = {}, LOGLEN = {}".format(self.my_id, self.commit_index, leader_commit, len(self.log)))

        return_msg['prev_log_idx'] = len(self.log)
        return_msg['success'] = True
        self.send_message(return_msg)

    def handle_append_rpc_response(self, msg_dict):
        if self.is_leader():
            dst = msg_dict.get('src')
            prev_idx = msg_dict.get('prev_log_idx')
            # get quorum index
            self.match_indexes[dst] = prev_idx
            self.next_indexes[dst] = prev_idx + 1
            # 1. Check the quorum threshold
            # 2. Check the index where commit index should reach quorum
            # 3. Verify there is actually quorum w/value at index
            quorum_threshold = math.ceil(float(len(self.replica_ids))/2.0)
            quorum_index = int(quorum_threshold)-1
            # TODO: Verify. We want a chance for commit_index to go high vs low (read: case where even # of replicas)
            # I think this is true bc leader should be most up to date and leader will opt for high
            # Otherwise 2 failed replicas stuck at low while the other 2 are incrementing high will keep leader at low
            # even though the 2 high will make quorum (situation where 5 nodes)
            sorted_match_indices = sorted(self.match_indexes.values(), reverse=True)
            if sorted_match_indices.count(sorted_match_indices[quorum_index]) >= quorum_threshold:
                self.commit_index = sorted_match_indices[quorum_index]
                if self.DEBUG:
                    print str(self.my_id)+" Leader index: " + str(self.commit_index) + " " + str(self.match_indexes)
            # Handle a follower who is behind in log entries
            if not msg_dict.get('success'):
                entries = self.log[prev_idx+1:prev_idx+100] # Entries as a string is about 100 chars long which will mess up reading by fixed number of bytes. so let's segment for crash tests when a log can fall way behind
                threading.Thread(target=self.append_entries_rpc, kwargs={"dst": dst,'entries':entries}).start()
                return

    '''
    Request Vote RPC
    '''
    def request_vote_rpc(self, term, last_log_index, last_log_term, dst='FFFF'):
        if self.is_leader():
            return
        message = { 'dst':dst,
                    'type':'request_vote_rpc',
                    'term':term,
                    'last_log_index':last_log_index,
                    'last_log_term':last_log_term}
        self.send_message(message)#, '{} requesting vote RPC'.format(self.my_id))

    def handle_request_vote_rpc(self,msg_dict):
        '''
        1. Reply false if term < current_term
        2. If votedFor is null or candidate_id, and candidate's log is at
        least as up-to-date as receiver's log, grant vote
        '''
        term = msg_dict.get('term')
        last_log_index = msg_dict.get('last_log_index')
        last_log_term = msg_dict.get('last_log_term')
        dst = msg_dict.get('src')

        grant = term >= self.current_term and last_log_index >= len(self.log) and last_log_term >= self.log[-1][0] and not self.voted_this_term

        if term > self.current_term:
            self.update_term(term)
            self.kick_clock()

        self.vote(grant, dst, dst, term)

    def vote(self, grant, dst, candidate_id, term):
        message = {'dst': dst,
                   'type': 'vote',
                   'term': term, # No spec on this. I think it makes sense for the vote to include the requested term (to indicate requestor and receiver are talking about the same term)
                   'voteGranted': grant}
        if grant:
            self.send_message(message)#,'{} cast vote for {}'.format(self.my_id, candidate_id))
            self.switch_to_follower()
            self.voted_this_term = True
        else:
            self.send_message(message)#, '{} denied vote to {}'.format(self.my_id, candidate_id))

    def handle_vote(self,msg_dict):
        if self.is_candidate():
            self.votes_received += 1
            if msg_dict.get('voteGranted'):
                self.supporters.append(msg_dict.get('src'))
            # Majority rejected replica's request for votes
            if self.votes_received - len(self.supporters) > math.floor(len(self.replica_ids) / 2):
                self.switch_to_follower()
            # Majority voted for replica
            if len(self.supporters) > math.floor(len(self.replica_ids) / 2):
                if self.DEBUG:
                    print("{}: IM THE LEADER!".format(self.my_id))
                self.switch_to_leader()
                for replica in self.replica_ids:
                    threading.Thread(target=self.append_entries_rpc, kwargs={"dst": replica, 'entries':[]}).start()

    def switch_to_candidate(self):
        self.current_state = "CANDIDATE"
        self.current_term += 1
        self.supporters = [self.my_id]
        self.votes_received = 0
        self.votedFor = self.my_id
        self.voted_this_term = True

    def is_candidate(self):
        return self.current_state == "CANDIDATE"

    def switch_to_follower(self):
        self.current_state = "FOLLOWER"
        self.voted_this_term = False
        self.supporters = []
        self.votes_received = 0
        self.kick_clock()

    def is_follower(self):
        return self.current_state == "FOLLOWER"

    def switch_to_leader(self):
        self.leader = self.my_id
        self.current_state = "LEADER"
        self.last_heartbeat = time.time()
        self.next_indexes = {rep:self.commit_index + 1 for rep in self.replica_ids}

    def is_leader(self):
        return self.current_state == "LEADER"

    '''
        CLIENT-RELATED
    '''


    def redirect(self,msg_dict):
        redir_msg_dict = {'dst':msg_dict.get('src'),
                          'type':'redirect',
                          'MID':msg_dict.get('MID')}
        self.send_message(redir_msg_dict)

    def handle_put(self,msg_dict):
        if self.DEBUG:
            print("Put received: "+str(msg_dict))
        # TODO Remove this and put it in the timeout. implement some buffer here?
        if self.is_leader():
            mid = msg_dict.get('MID')
            key = msg_dict.get('key')
            val = msg_dict.get('value')
            new_entry = (self.current_term,{mid:{key:val}})
            self.log.append(new_entry)
            # TODO Only do this after getting a quorum?
            self.data[key]=val
            for replica in self.replica_ids:
                threading.Thread(target=self.append_entries_rpc, kwargs={"dst": replica, 'entries':[new_entry]}).start()
            ok_msg_dict = {'dst':msg_dict.get('src'),
                           'type':'ok',
                           'MID': mid}
            self.send_message(ok_msg_dict)
        elif self.leader == 'FFFF':
            # fail
            mid = msg_dict.get('MID')
            fail_msg_dict = {'dst':msg_dict.get('src'),
                           'type':'fail',
                           'MID': mid}
            self.send_message(fail_msg_dict)
        else:
            self.redirect(msg_dict)

    def handle_get(self,msg_dict):
        #TODO not sure if gets should have redirects. There is a fail condition where a replica will respond with an out of date value in the data dictionary
        '''
        if self.leader == 'FFFF':
            # fail
            mid = msg_dict.get('MID')
            fail_msg_dict = {'dst':msg_dict.get('src'),
                           'type':'fail',
                           'MID': mid}
            self.send_message(fail_msg_dict)
        elif not self.is_leader():
            self.redirect(msg_dict)
            return
        '''

        if self.DEBUG:
            print("Get received: "+str(msg_dict))
        mid = msg_dict.get('MID')
        key = msg_dict.get('key')
        if key in self.data:
            ok_msg_dict = {'dst':msg_dict.get('src'),
                           'type':'ok',
                           'MID': mid,
                           'value':self.data[key]}
            self.send_message(ok_msg_dict)
        else:
            fail_msg_dict = {'dst':msg_dict.get('src'),
                             'type':'fail',
                             'MID': mid}
            self.send_message(fail_msg_dict)

    '''
        Handler
                '''
    def handle_message(self,message):
        switch_case = {'append_entries_rpc':self.handle_append_entries_rpc,
                       'append_rpc_response':self.handle_append_rpc_response,
                       'request_vote_rpc':self.handle_request_vote_rpc,
                       'vote':self.handle_vote,
                       'put':self.handle_put,
                       'get':self.handle_get,}
        if self.DEBUG and self.ALL_MSGS:
            print("{}: Received message: {}".format(self.my_id,message))
        msg_dict = json.loads(message)
        if msg_dict.get('dst') in (self.my_id, 'FFFF'):
            switch_case[msg_dict.get('type')](msg_dict)



    '''
    MAIN
    '''

def main():
    # Your ID number = sys.argv[1]
    # The ID numbers of all th,""other replicas = sys.argv[2:]
    server = Server(sys.argv[1], sys.argv[2:])
    server.start()

if __name__=="__main__":
    main()
