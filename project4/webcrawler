#!/usr/bin/env python3
import sys
#import html
#import html.parse
#import parseurl

from lxml import html

from html.parser import HTMLParser
from socket import socket, AF_INET, SOCK_STREAM
from urllib.parse import urlparse
import gzip
import re
PORT = 80
BUFF = 4096
LOGIN_URL = 'http://fring.ccs.neu.edu/accounts/login/?next=/fakebook/'
CRLF = '\r\n'

####
import pdb
####


class WebCrawler:

    def __init__(self):
        self.token=''
        self.session=''

    def request(self, host, request):
        # Open socket and send request. Returns decoded response data
        sock = socket(AF_INET, SOCK_STREAM)
        sock.connect((host, PORT))
        sock.send(request.encode('utf-8'))
        sock.settimeout(0.2)
        return sock.recv(BUFF).rstrip().decode(), sock

    def prep_url(self, url):
        p_url = urlparse(url)
        path = '/' if not p_url.path else p_url.path
        if p_url.query:
            path += '?'+p_url.query
        return path, p_url.netloc

    def GET(self,url):
        path, host = self.prep_url(url)

        request = 'GET '+path+' HTTP/1.1\nHost: '+host
        if self.token and self.session:
            request+='\nConnection: keep-alive\n'+\
                       'Cookie: csrftoken={}; sessionid={}\n'.format(self.token,self.session)+\
                       'Cache-Control: max-age=0\n'+\
                       'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\n'+\
                       'User-Agent: ChrisEric/1.1\n'+\
                       'Upgrade-Insecure-Requests: 1\n'+\
                       'Accept-Language: en-US,en;q=0.8\n'#+\
                       #'Accept-Encoding: gzip, deflate, sdch'+\
        request+='\n\r\n'
        data, sock = self.request(host, request)
        while True:
            init_length = len(data)
            try:
                data += sock.recv(BUFF).decode()
            except:
                break
            if init_length == len(data):
                break

        sock.close()
        return data

    def POST(self,url, **kwargs):
        p_url = urlparse(url)
        path = '/' if not p_url.path else p_url.path
        host = p_url.netloc

        content = ''
        count = 0
        for key,val in kwargs.items():
            if count > 0:
                content+='&'
            content += key+'='+val
            count+=1

        msg = "POST {} HTTP/1.1\n".format(path)+\
              "Host: {}\n".format(host)+\
              "Connection: keep-alive\n"+\
              "Content-Length: {}\n".format(str(len(content)))+\
              "Content-Type: application/x-www-form-urlencoded\n"+\
              "Cache-Control: max-age=0\n"+\
              "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\n"+\
              "Origin: http://{}\n".format(host)+\
              "Upgrade-Insecure-Requests: 1\n"+\
              "User-Agent: ChrisEric/1.1\n"+\
              "Referer: {}\n".format(LOGIN_URL)+\
              "Accept-Language: en-US\n"+\
              "Cookie: csrftoken={}; sessionid={}\n\n".format(self.token,self.session)#+\
              #"X-CSRFToken: {}".format(self.token)+CRLF
              #"Accept-Encoding: gzip, deflate"+CRLF+\ TODO it will send encoded data if we let it
        msg+=content+CRLF
        sock = socket(AF_INET, SOCK_STREAM)
        sock.connect((host,PORT))
        sock.send(msg.encode('utf-8'))
        data = sock.recv(BUFF).rstrip().decode()
        sock.close()
        return data

    def fb_login(self,user,pwd):
        data = self.GET(LOGIN_URL)
        self.token = re.search("csrftoken=(.+?);",data).group(0)[10:-1]
        self.session = re.search("sessionid=(.+?);",data).group(0)[10:-1]

        ret = self.POST(LOGIN_URL,
                  username=user,
                  password=pwd,
                  next='%2Ffakebook%2F',
                  csrfmiddlewaretoken=self.token)
        #self.session = re.search("sessionid=(.+?);",data).group(0)[10:-1]
        redirect = re.search('Location: (.+?)\r',ret).group(0)[10:-1]
        self.main_page = self.GET(redirect)

    def crawl(self):
        pdb.set_trace()
        print(self.main_page)

        pass

if __name__ == '__main__':
    if len(sys.argv) < 3:
        print("username and password required: ./webcrawl <username> <password>")
        sys.exit()

    username = sys.argv[1]
    password = sys.argv[2]

    crawler = WebCrawler()
    crawler.fb_login(username,password)
    crawler.crawl()

    # tree = html.fromstring(data)
    # print(tree)
