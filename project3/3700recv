#!/usr/bin/env python
from socket import socket, AF_INET, SOCK_DGRAM
from zlib import decompress, error
import datetime
import json
import sys
#import select
#import time
UDP_IP = '127.0.0.1'
UDP_PORT = 0
MSG_SIZE = 1500
TIMEOUT = 30

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

if __name__=='__main__':

    # Set up the socket
    sock = socket(AF_INET, SOCK_DGRAM)
    sock.bind((UDP_IP,UDP_PORT))
    sock.settimeout(TIMEOUT)

    # Get port we bound to
    UDP_PORT = sock.getsockname()[1]
    log("[bound] " + str(UDP_PORT))

    while True:
        result = sock.recvfrom(MSG_SIZE)
        # If nothing is ready, we hit the timeout
        if result:
            (data, addr) = result
        try:
            # the data may not always be compressed as there isn't always a benefit to it
            try:
                data = decompress(data)
            except error:
                log('receiving uncompressed data')
            decoded = json.loads(data)

            # If the EOF flag is set, exit
            if (decoded['eof']):
                log("[completed]")
                sys.exit(0)

            # If there is data, we accept it and print it out
            if (decoded['data']):
                # If we receive data, we assume it's in-order
                # You will need to do much more here
                log("[recv data] " + str(decoded['sequence']) + " (" + str(len(decoded['data'])) + ") ACCEPTED (in-order)")
                sys.stdout.write(decoded['data'])

            # Send back an ack to the sender
            msg = json.dumps({"ack": decoded['sequence'] + len(decoded['data'])})
            log("ABOUT TO SEND " + msg)
            if sock.sendto(msg, addr) < len(msg):
                log("[error] unable to fully send packet")

        except (ValueError, KeyError, TypeError) as e:
            log("[recv corrupt packet]")
            raise e
    else:
        log("[error] timeout")
        sys.exit(-1)
