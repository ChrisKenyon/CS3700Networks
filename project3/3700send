#!/usr/bin/env python
import sys
from socket import socket, AF_INET, SOCK_DGRAM
import time
import datetime
import select
import json
import random
from zlib import compress

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
SEQUENCE = random.randrange(4294967295) #random sequence number within the 32-bit range

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

def send_packet(data, **kwargs):
    # Helper function to send packet
    global SEQUENCE

    msg = json.dumps({
        "sequence": SEQUENCE,
        "data": data,
        "ack": kwargs.get("ack", False),
        "acknum": 0,
        "eof": kwargs.get("eof", False),
        "syn": kwargs.get("syn", False),
        "ad_window": kwargs.get("ad_window", 0),
        "checksum": kwargs.get("checksum", None)
    })
    if data:
        SEQUENCE += len(data)
    elif kwargs.get("syn"):
        SEQUENCE += 1
    print("SENDING", msg, "TO", dest)
    if sock.sendto(msg, dest) < len(msg):
        log("[error] unable to fully send packet")
        return False

    log("[send data] {} ({})".format(str(SEQUENCE), len(data) if data else 0))
    return True

def handshake():
    # Establish handshake with receiver.
    global SEQUENCE

    offer_hand = send_packet(None, **{"syn": True}) #Initial SYN to receiver

    result = sock.recvfrom(MSG_SIZE)

    if result:
        (data, addr) = result
        try:
            decoded = json.loads(data)

            # If there is a syn/ack, send ack back
            if decoded['ack'] == SEQUENCE and decoded['syn']:
                log("[recv syn/ack] " + str(SEQUENCE))

            # Send ack back; break if no more data
            send_packet(None, **{"ack": decoded['sequence'] + 1})
            return True
        except (ValueError, KeyError, TypeError):
            log("[recv corrupt packet]")
            return False
    else:
        log("[error] timeout on handshake")
        sys.exit(-1)

def send_next_packet():
    global SEQUENCE

    data = sys.stdin.read(DATA_SIZE)
    if (len(data) > 0):
        send_packet(data)
        return True
    else:
        return False

if __name__=='__main__':

    # Set up the socket
    sock = socket(AF_INET, SOCK_DGRAM)
    sock.settimeout(TIMEOUT)

    handshake()
    # Send first packet
    send_next_packet()

    # Now read in data, send packets
    while True:
        log("ABOUT TO SLEEP")
        result = sock.recvfrom(MSG_SIZE)

        if result:
            (data, addr) = result
            try:
                decoded = json.loads(data)

                # If there is an ack, send next packet
                if decoded['ack'] == SEQUENCE:
                    log("[recv ack] " + str(SEQUENCE))

                # Try to send next packet; break if no more data
                if (not send_next_packet()):
                    break
            except (ValueError, KeyError, TypeError):
                log("[recv corrupt packet]")
        else:
            log("[error] timeout")
            sys.exit(-1)

    sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
    sys.exit(0)

