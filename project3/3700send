#!/usr/bin/env python
import sys
from socket import socket, AF_INET, SOCK_DGRAM
import time
import datetime
import select
import json
import random
from zlib import compress, crc32

MSG_SIZE = 1500
DATA_SIZE = 1300
COMPRESS_INC = 200
COMPRESS_THRESH = 200
#TODO make this not a constant
HEADER_LEN = 50
TIMEOUT = 5

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

class PacketSender:

    def __init__(self):
        self.sequence = random.randrange(4294967295) #random sequence number within the 32-bit range
        self.msg_buffer = {}  #{seq # : data}
        self.rtt = 5

    def estimate_rtt(self, old_rtt, new_rtt, alpha=0.875):
        new_rtt = (alpha * old_rtt) + (1 - alpha) * new_rtt
        return new_rtt

    # helper function to send packets. Ideally this will move some code out of
    # send_next_packet so handshake and send_next_packet share the same sending code.
    # Ran into errors with compression so I'm leaving both implementations in for now
    def send_packet(self, data, **kwargs):
        msg_dict = {
            "sequence": self.sequence,
            "data": data,
            "ack": kwargs.get("ack", False),
            "eof": kwargs.get("eof", False),
            "syn": kwargs.get("syn", False),
        }
        msg_dict['crc'] = sum([crc32(str(val)) for key,val in msg_dict.iteritems()])
        msg=json.dumps(msg_dict)
        if data:
            self.sequence += len(data)
        elif kwargs.get("syn"):
            self.sequence += 1

        log("[send data] {} ({})".format(str(self.sequence), len(data) if data else 0))
        if self.sock.sendto(msg, dest) < len(msg):
            log("[error] unable to fully send packet")
            return False

        return True

    def handshake(self):
        # Establish handshake with receiver.
        self.sequence = self.initial_seq
        start = time.time()
        offer_hand = self.send_packet(None, **{"syn": True}) #Initial SYN to receiver
        try:
            result = self.sock.recvfrom(MSG_SIZE)
            self.rtt = time.time() - start #Estimate of the RTT
        except Exception as e:
            print(e)
            return False

        if result:
            (data, addr) = result
            try:
                decoded = json.loads(data)

                # If there is a syn/ack, send ack back
                if decoded['ack'] == self.sequence and decoded['syn']:
                    log("[recv syn/ack] "+str(decoded['syn'])+'/'+str(decoded['ack']))

                # Send ack back; break if no more data
                self.send_packet(None, **{"ack": decoded['syn'], "syn": True})
                time.sleep(1)
                return True
            except (ValueError, KeyError, TypeError):
                log("[recv corrupt packet]")
                return False
        else:
            log("[error] timeout on handshake")
            return False

    def send_next_packet(self):

        #eof = False
        data = sys.stdin.read(DATA_SIZE)
        if (len(data) > 0):
            if len(data) == DATA_SIZE:
                while(len(compress(data)) < DATA_SIZE):
                    # Need to add data but don't want to go over DATA_SIZE+COMPRESS_INC nor infinitely loop adding small chunks
                    add = sys.stdin.read(max(DATA_SIZE-len(data),COMPRESS_INC))
                    if add:
                        data += add
                    else:
                        #eof = True
                        break
                data += sys.stdin.read(MSG_SIZE-len(compress(data))-HEADER_LEN)

            self.sequence += len(data)
            msg_dict = {
                "sequence": self.sequence,
                "data": data,
                "eof": False, #eof
                }
            #debug
            msg_dict['crc'] = sum([crc32(str(val)) for key,val in msg_dict.iteritems()])
            msg=json.dumps(msg_dict)
            self.msg_buffer[self.sequence]=msg
            # DEBUG
            #log("SENDING "+msg+"TO "+ str(dest))
            #log("orig length: " + str(len(msg)))
            # due to overhead of compression, small strings suffer from zlib compression
            if len(msg)> COMPRESS_THRESH:
                msg = compress(msg)
                #print("compressed length: " + str(len(msg)))
            start = time.time()
            sock_response = self.sock.sendto(msg, dest)
            new_rtt = time.time() - start
            rtt_estimate = self.estimate_rtt(self.rtt, new_rtt)
            if sock_response < len(msg):
                log("[error] unable to fully send packet")
            else:
                log("[send data] " + str(self.sequence) + " (" + str(len(data)) + ")")
            return True
        else:
            return False

    def resend_packet(self,msg):
        if self.sock.sendto(msg, dest) < len(msg):
            log("[error] unable to fully send packet")
            return False
        else:
            log("[resend data] " + str(self.sequence))
            return True

    def start(self):
        # random bug technically could happen if the seq started as 0
        self.sequence = self.sequence if self.sequence != 0 else 1
        self.initial_seq = self.sequence
        # Set up the self.socket
        self.sock = socket(AF_INET, SOCK_DGRAM)

        # TODO figure out good timeout val for handshake
        # should it be getting a rtt time??
        self.sock.settimeout(5)
        # run til it succeeds
        while not self.handshake():
            pass
        # Send first packet
        self.sock.settimeout(self.rtt)
        sent = self.send_next_packet()

        # Now read in data, send packets
        while True:
            self.sock.settimeout(self.rtt)
            log("ABOUT TO SLEEP")

            try:
                result = self.sock.recvfrom(MSG_SIZE)
            except:
                result=None
                log("DEBUG CAUGHT THIS!!!")

            if result:
                (data, addr) = result
                try:
                    decoded = json.loads(data)
                    #need to make sure the third part of the handshake was registered
                    #so that the last_sequence and msg_buff are initiated on the receiver
                    # there's no way to know unless we get another syn back
                    if 'syn' in decoded and not decoded['syn']:
                        # this is a special case which requires special attention... let's just roll back sequence for now
                        self.sequence = self.initial_seq
                        # run til it succeeds
                        while not self.handshake():
                            pass
                        first_seq = self.msg_buffer.keys()[0]
                        self.resend_packet(self.msg_buffer.get(first_seq))
                        continue
                    elif 'fin' in decoded:
                        log("receiver has received full message")
                        break
                    elif 'nack' in decoded:
                        log("PACKET FAILED CRC WITH SEQ#"+str(decoded['nack']))
                        self.resend_packet(self.msg_buffer.get(decoded['nack']))
                        continue
                    # If there is an ack, send next packet
                    seq = decoded['ack']
                    log("[recv ack] " + str(seq))
                    self.msg_buffer.pop(seq)

                    # Try to send next packet; break if no more data
                    sent = self.send_next_packet()
                    if not sent:
                        self.sock.sendto(json.dumps({"eof": True, "data": "", "sequence": self.sequence, "ack": False}), dest)
                except (ValueError, KeyError, TypeError) as e:
                    log("[recv corrupt packet] "+str(e))
                    log(str(sorted(self.msg_buffer)))
            else:
                log("[error] timeout")
                # resend earliest unack'd TODO: it would only be one packet as of now, but with a window the earliest may not be the last sent
                earliest_seq = sorted(self.msg_buffer)[0]
                self.resend_packet(self.msg_buffer.get(earliest_seq))
                log("RESENDING "+str(sorted(self.msg_buffer)))
                #sys.exit(-1)
                #TODO adjust timeout with RTT

        sys.exit(0)

if __name__=='__main__':

    sender = PacketSender()
    sender.start()
