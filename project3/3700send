#!/usr/bin/env python
import sys
from socket import socket, AF_INET, SOCK_DGRAM
import time
import datetime
import select
import json
from zlib import compress, crc32

MSG_SIZE = 1500
DATA_SIZE = 1300
COMPRESS_INC = 200
COMPRESS_THRESH = 200
#TODO make this not a constant
HEADER_LEN = 50
TIMEOUT = 30
SEQUENCE = 0

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

def send_next_packet():
    global SEQUENCE

    data = sys.stdin.read(DATA_SIZE)
    if (len(data) > 0):
        if len(data) == DATA_SIZE:
            while(len(compress(data)) < DATA_SIZE):
                # Need to add data but don't want to go over DATA_SIZE+COMPRESS_INC nor infinitely loop adding small chunks
                add = sys.stdin.read(max(DATA_SIZE-len(data),COMPRESS_INC))
                if add:
                    data += add
                else: break
            data += sys.stdin.read(MSG_SIZE-len(compress(data))-HEADER_LEN)

        SEQUENCE += len(data)
        msg = json.dumps({"sequence": SEQUENCE, "data": data, "ack": False, "eof": False, 'crc':crc32(data)})
        print "SENDING", msg, "TO", dest
        print "orig length: " + str(len(msg))
        # due to overhead of compression, small strings suffer from zlib compression
        if len(msg)> COMPRESS_THRESH:
            msg = compress(msg)
            print "compressed length: " + str(len(msg))
        if sock.sendto(msg, dest) < len(msg):
            log("[error] unable to fully send packet")
        else:
            log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
        return True, msg
    else:
        return False, None

def resend_packet(msg):
    if sock.sendto(msg, dest) < len(msg):
        log("[error] unable to fully send packet")
        return False
    else:
        log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
        return True

if __name__=='__main__':

    # Set up the socket
    sock = socket(AF_INET, SOCK_DGRAM)
    sock.settimeout(TIMEOUT)

    # Send first packet
    sent, last_msg = send_next_packet()

    # Now read in data, send packets
    while True:
        log("ABOUT TO SLEEP")
        result = sock.recvfrom(MSG_SIZE)

        if result:
            (data, addr) = result
            try:
                decoded = json.loads(data)
                if 'nack' in decoded:
                    log("PACKET FAILED CRC WITH SEQ#"+str(decoded['nack']))
                    resend_packet(last_msg)
                    continue
                # If there is an ack, send next packet
                elif decoded['ack'] == SEQUENCE:
                    log("[recv ack] " + str(SEQUENCE))

                # Try to send next packet; break if no more data
                sent, last_msg = send_next_packet()
                if not sent:
                    break
            except (ValueError, KeyError, TypeError) as e:
                log("[recv corrupt packet] e"+str(e))
        else:
            log("[error] timeout")
            sys.exit(-1)

    sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
    sys.exit(0)

