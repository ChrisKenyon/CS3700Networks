#!/usr/bin/env python
import math
import sys
from socket import socket, AF_INET, SOCK_DGRAM
import time
import datetime
import select
import json
import random
from zlib import compress, crc32

MSG_SIZE = 1500
DATA_SIZE = 1200
COMPRESS_INC = 200
COMPRESS_THRESH = 200
HEADER_LEN = 50
TIMEOUT = 5

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

class PacketSender:

    def __init__(self):
        self.cwindow = 1
        self.duptrack = []  # [seq #, number ACKs]
        self.ssthresh = 65535
        self.sequence = random.randrange(4294967295) #random sequence number within the 32-bit range

        self.msg_buffer = {} #{seq #: [inflight, data]}
        self.msg_time = {}
        self.rtt = 2.0
        self.eof_data_seq = -1
        ## DEBUG ##
        self.inflight = 0

    def estimate_rtt(self, old_rtt, new_rtt, alpha=0.875):
        log('updating rtt {} with new rtt {}'.format(old_rtt,new_rtt))
        new_rtt = (alpha * old_rtt) + (1.0 - alpha) * new_rtt
        return max(min(1.1,new_rtt),0.005)

    # helper function to send packets. Ideally this will move some code out of
    # send_next_packet so handshake and send_next_packet share the same sending code.
    # Ran into errors with compression so I'm leaving both implementations in for now
    def send_packet(self, data, **kwargs):
        msg_dict = {
            "sequence": self.sequence,
            "data": data,
            "ack": kwargs.get("ack", False),
            "eof": kwargs.get("eof", False),
            "syn": kwargs.get("syn", False),
        }
        msg_dict['crc'] = sum([crc32(str(val)) for key,val in msg_dict.iteritems()])
        msg=json.dumps(msg_dict)
        if data:
            self.sequence += len(data)
        elif kwargs.get("syn"):
            self.sequence += 1

        log("[send data] {} ({})".format(str(self.sequence), len(data) if data else 0))
        if self.sock.sendto(msg, dest) < len(msg):
            log("[error] unable to fully send packet")
            return False

        return True

    def handshake(self):
        # Establish handshake with receiver.
        self.sequence = self.initial_seq
        # TODO figure out good timeout val for handshake
        # should it be getting a rtt time??
        self.sock.settimeout(1.5)
        start = time.time()
        offer_hand = self.send_packet(None, **{"syn": True}) #Initial SYN to receiver
        try:
            result = self.sock.recvfrom(MSG_SIZE)
            self.rtt = time.time() - start #Estimate of the RTT
        except Exception as e:
            print(e)
            return False

        # Step 2. Got something back from receiver
        if result:
            (data, addr) = result
            try:
                decoded = json.loads(data)

                # If there is a syn/ack, send ack back
                if decoded.get('ack') == self.sequence and decoded.get('syn'):
                    log("[recv syn/ack] {}/{}".format(str(decoded['syn']), str(decoded['ack'])))
                else:
                    return False
                if 'adv_window' in decoded:
                    self.ssthresh = decoded['adv_window']
                # Send ack back; break if no more data
                self.send_packet(None, **{"ack": decoded['syn'], "syn": True})
                return True
            except (ValueError, KeyError, TypeError):
                log("[recv corrupt handshake packet]")
                return False
        else:
            log("[error] timeout on handshake")
            return False


    def load_next_packet(self, num_packets):
        eof = False
        for i in range(num_packets):
            data = sys.stdin.read(DATA_SIZE)
            if (len(data) > 0):
                if len(data) == DATA_SIZE:
                    while(len(compress(data)) < DATA_SIZE):
                        # Need to add data but don't want to go over DATA_SIZE+COMPRESS_INC nor infinitely loop adding small chunks
                        add = sys.stdin.read(max(DATA_SIZE-len(data),COMPRESS_INC))
                        if add:
                            data += add
                        else:
                            eof = True
                            break
                    data += sys.stdin.read(MSG_SIZE-len(compress(data))-HEADER_LEN)
                else:
                    eof = True

                self.sequence += len(data)
                if eof:
                    self.eof_data_seq = self.sequence
                msg_dict = {
                    "sequence": self.sequence,
                    "data": data,
                    "eof": eof
                    }
                #debug
                msg_dict['crc'] = sum([crc32(str(val)) for key,val in msg_dict.iteritems()])
                msg=json.dumps(msg_dict)
                self.msg_buffer[self.sequence]=[False, msg]
            else:
                # load eof if its not already loaded
                if self.sequence+1 not in self.msg_buffer:
                    self.msg_buffer[self.sequence+1]=[False, json.dumps({"eof": True, "data": "", "sequence": self.sequence+1, "ack": False})]
        log("[message buff loaded] {}".format([[key, value[0]] for key, value in self.msg_buffer.items()]))

    def send_next_packet(self):
        if len(self.msg_buffer)>0:
            # Loop thru msg_buffer to find first packet not yet in flight
            seq = 0 # this is just so we can look at the msg_buffer outside of the loop
            for i in range(len(self.msg_buffer)):
                seq = sorted(self.msg_buffer)[i]
                # Packet is in flight
                if not self.msg_buffer[seq][0]:
                    msg = self.msg_buffer[seq][1]
                    break
            if self.msg_buffer[seq][0]:
                # We iterated to end of message buffer and all packets are in flight. Return
                return False

            # Pre-queue data structure for msg_buffer

            # due to overhead of compression, small strings suffer from zlib compression
            msg_len = len(msg)
            if msg_len> COMPRESS_THRESH:
                msg = compress(msg)
            self.msg_time[seq] = time.time()
            sock_response = self.sock.sendto(msg, dest)
            # Mark packet as in flight
            self.msg_buffer[seq][0] = True

            if sock_response < len(msg):
                log("[error] unable to fully send packet")
            else:
                self.inflight += 1
                log("[send data] {} ({}) (inflight={})".format(str(seq), str(msg_len), self.inflight))
                log("with rtt " + str(self.rtt))
            return True
        else:
            return False

    def start(self):
        # random bug technically could happen if the seq started as 0
        self.sequence = self.sequence if self.sequence != 0 else 1
        self.initial_seq = self.sequence
        # Set up the self.socket
        self.sock = socket(AF_INET, SOCK_DGRAM)

        # run til it succeeds
        handshake = self.handshake()
        while not handshake:
            handshake = self.handshake()
        # Send first packet
        self.sock.settimeout(2.0*self.rtt) # RTO is 2 * new_rtt

        self.load_next_packet(int(math.floor(self.cwindow) - len(self.msg_buffer)))
        self.send_next_packet()
        self.receive_loop()

    def receive_loop(self):
        # Now read in data, send packets
        while True:
            self.sock.settimeout(2.0*self.rtt)
            #log("ABOUT TO SLEEP")

            try:
                result = self.sock.recvfrom(MSG_SIZE)
            except:
                result=None

            if result:
                (data, addr) = result
                finished = self.handle_data(data)
                # Trying to re-establish a bad handshake within handle_data cause timeout errors
                if finished == "bad_handshake":
                    handshake = self.handshake()
                    while not handshake:
                        handshake = self.handshake()
                    self.send_next_packet()
                elif finished == "packet_failed":
                    self.send_next_packet()
                elif finished:
                    break
            else:
                log("[error] timeout")
                # Reset congestion window to 1 on timeout
                self.ssthresh = round(float(self.cwindow)/float(2))
                log("[timeout] ssthresh set to {}".format(self.ssthresh))
                self.cwindow = 1
                log("[timeout] cwindow set to 1")

                self.inflight = 0
                for seq, data in self.msg_buffer.items():
                    self.msg_buffer[seq][0] = False

                log("[timeout] msg_buffer: {}".format([[key, value[0]] for key, value in self.msg_buffer.items()]))
                if len(self.msg_buffer)==0:
                    self.load_next_packet(1)
                self.send_next_packet()

        sys.exit(0)

    def handle_data(self,data):
        try:
            decoded = json.loads(data)
            #need to make sure the third part of the handshake was registered
            #so that the last_sequence and msg_buff are initiated on the receiver
            # there's no way to know unless we get another syn back
            if len(decoded) == 1 and 'syn' in decoded and not decoded['syn']:
                # this is a special case which requires special attention....
                # run til it succeeds
                return "bad_handshake"
            elif 'fin' in decoded:
                log("receiver has received full message")
                return True
            elif 'nack' in decoded:
                log("PACKET FAILED CRC WITH SEQ#"+str(decoded['nack']))
                # This should reset and re-send needed packet
                self.msg_buffer[decoded['nack']][0] = False
                return "packet_failed"
            # If there is an ack, send next packet
            seq = decoded['ack']

            self.inflight = max(0, self.inflight + 1)
            log("[recv ack] {} (inflight={})".format(str(seq), self.inflight))
            # Tracking duplicates for fast recovery
            if len(self.duptrack) == 2 and self.duptrack[0] == seq:
                self.duptrack[1] += 1
                # Fast retransmit
                if self.duptrack[1] == 3:
                    self.cwindow = int(round(float(self.ssthresh)/float(2)))
                    log("[triplicate ACK] set cwnd to {}".format(self.cwindow))
            else:
                self.duptrack = [seq, 1]
            # Slow Start
            if self.cwindow < self.ssthresh:
                self.cwindow += 1
                log("[slow start] set cwnd to {}".format(self.cwindow))
            # Congestion avoidance
            else:
                self.cwindow += float(1)/float(math.floor(self.cwindow))
                log("[congestion avoidance] set cwnd to {} ".format(self.cwindow))
            new_rtt = time.time() - self.msg_time[seq]
            self.rtt = self.estimate_rtt(self.rtt, new_rtt)
            self.msg_buffer.pop(seq)

            # Try to send next packet; break if no more data
            if len(self.msg_buffer) < int(math.floor(self.cwindow)):
                loaded = self.load_next_packet(int(math.floor(self.cwindow) - len(self.msg_buffer)))
            # Send max amt of packets determined by cwnd
            for i in range(len(self.msg_buffer)):
                self.send_next_packet()
            return False
        except (ValueError, KeyError, TypeError) as e:
            log("[recv corrupt packet] "+str(e))
            log(str(sorted(self.msg_buffer)))

if __name__=='__main__':

    sender = PacketSender()
    sender.start()
