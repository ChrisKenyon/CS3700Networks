#!/usr/bin/env python
import math
import sys
from socket import socket, AF_INET, SOCK_DGRAM
import time
import datetime
import select
import json
import random
from zlib import compress, crc32

MSG_SIZE = 1500
DATA_SIZE = 1200
COMPRESS_INC = 200
COMPRESS_THRESH = 200
#TODO make this not a constant
HEADER_LEN = 50
TIMEOUT = 5

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

class PacketSender:

    def __init__(self):
        self.cwindow = 1
        self.duptrack = []  # [seq #, number ACKs]
        self.ssthresh = 65535
        self.sequence = random.randrange(4294967295) #random sequence number within the 32-bit range
        # Operate msg_buffer as queue. Insert new at front, pop oldest at back
        self.msg_buffer = []  # [[seq #, data}], [seq #2, data], ...]
        self.msg_time = {}
        self.rtt = 2.0

    def estimate_rtt(self, old_rtt, new_rtt, alpha=0.875):
        log('updating rtt {} with new rtt {}'.format(old_rtt,new_rtt))
        new_rtt = (alpha * old_rtt) + (1.0 - alpha) * new_rtt
        return new_rtt

    # helper function to send packets. Ideally this will move some code out of
    # send_next_packet so handshake and send_next_packet share the same sending code.
    # Ran into errors with compression so I'm leaving both implementations in for now
    def send_packet(self, data, **kwargs):
        msg_dict = {
            "sequence": self.sequence,
            "data": data,
            "ack": kwargs.get("ack", False),
            "eof": kwargs.get("eof", False),
            "syn": kwargs.get("syn", False),
        }
        msg_dict['crc'] = sum([crc32(str(val)) for key,val in msg_dict.iteritems()])
        msg=json.dumps(msg_dict)
        if data:
            self.sequence += len(data)
        elif kwargs.get("syn"):
            self.sequence += 1

        log("[send data] {} ({})".format(str(self.sequence), len(data) if data else 0))
        if self.sock.sendto(msg, dest) < len(msg):
            log("[error] unable to fully send packet")
            return False

        return True

    def handshake(self):
        # Establish handshake with receiver.
        self.sequence = self.initial_seq
        # TODO figure out good timeout val for handshake
        # should it be getting a rtt time??
        self.sock.settimeout(2.0)
        start = time.time()
        offer_hand = self.send_packet(None, **{"syn": True}) #Initial SYN to receiver
        try:
            result = self.sock.recvfrom(MSG_SIZE)
            self.rtt = time.time() - start #Estimate of the RTT
        except Exception as e:
            print(e)
            return False

        if result:
            (data, addr) = result
            try:
                decoded = json.loads(data)

                # If there is a syn/ack, send ack back
                if decoded['ack'] == self.sequence and decoded['syn']:
                    log("[recv syn/ack] "+str(decoded['syn'])+'/'+str(decoded['ack']))
                if 'adv_window' in decoded:
                    self.ssthresh = decoded['adv_window']
                # Send ack back; break if no more data
                self.send_packet(None, **{"ack": decoded['syn'], "syn": True})
                return True
            except (ValueError, KeyError, TypeError):
                log("[recv corrupt packet]")
                return False
        else:
            log("[error] timeout on handshake")
            return False


    def load_next_packet(self, num_packets):
        for i in range(num_packets):
            data = sys.stdin.read(DATA_SIZE)
            if (len(data) > 0):
                if len(data) == DATA_SIZE:
                    while(len(compress(data)) < DATA_SIZE):
                        # Need to add data but don't want to go over DATA_SIZE+COMPRESS_INC nor infinitely loop adding small chunks
                        add = sys.stdin.read(max(DATA_SIZE-len(data),COMPRESS_INC))
                        if add:
                            data += add
                        else:
                            #eof = True
                            break
                    data += sys.stdin.read(MSG_SIZE-len(compress(data))-HEADER_LEN)

                self.sequence += len(data)
                msg_dict = {
                    "sequence": self.sequence,
                    "data": data,
                    "eof": False, #eof
                    }
                #debug
                msg_dict['crc'] = sum([crc32(str(val)) for key,val in msg_dict.iteritems()])
                msg=json.dumps(msg_dict)
                self.msg_buffer.insert(0, [self.sequence, msg])
            else:
                # load eof if its not already loaded
                if len(self.msg_buffer) > 0 and self.sequence+1 not in self.msg_buffer[0]:
                    self.msg_buffer.insert(0, {
                        self.sequence+1 : json.dumps({"eof": True, "data": "", "sequence": self.sequence+1, "ack": False})
                    })


    def send_next_packet(self):

        if len(self.msg_buffer)>0: # TODO greater than cmwd??
            next = self.msg_buffer.pop()
            seq = next[0]
            msg = next[1]
            # Pre-queue data structure for msg_buffer

            # seq = sorted(self.msg_buffer)[0]
            # msg = self.msg_buffer[seq]
            # DEBUG
            #log("SENDING "+msg+"TO "+ str(dest))
            #log("orig length: " + str(len(msg)))
            # due to overhead of compression, small strings suffer from zlib compression
            msg_len = len(msg)
            if msg_len> COMPRESS_THRESH:
                msg = compress(msg)
                #print("compressed length: " + str(len(msg)))
            self.msg_time[seq] = time.time()
            sock_response = self.sock.sendto(msg, dest)

            if sock_response < len(msg):
                log("[error] unable to fully send packet")
            else:
                log("[send data] " + str(self.sequence) + " (" + str(msg_len) + ")")
                log("with rtt " + str(self.rtt))
            return True
        else:
            return False

    def start(self):
        # random bug technically could happen if the seq started as 0
        self.sequence = self.sequence if self.sequence != 0 else 1
        self.initial_seq = self.sequence
        # Set up the self.socket
        self.sock = socket(AF_INET, SOCK_DGRAM)

        # run til it succeeds
        while not self.handshake():
            pass
        # Send first packet
        self.sock.settimeout(2.0*self.rtt) # RTO is 2 * new_rtt

        # TODO self.load_next_packet(cmwd-len(self.msg_buffer)) ?
        self.load_next_packet(1)
        self.send_next_packet()
        self.receive_loop()

    def receive_loop(self):
        # Now read in data, send packets
        while True:
            self.sock.settimeout(2.0*self.rtt)
            #log("ABOUT TO SLEEP")

            try:
                result = self.sock.recvfrom(MSG_SIZE)
            except:
                result=None

            if result:
                (data, addr) = result
                finished = self.handle_data(data)
                if finished:
                    break
            else:
                log("[error] timeout")
                # Reset congestion window to 1 on timeout
                self.ssthresh = round(float(self.cwindow)/float(2))
                self.cwindow = 1

                # resend earliest unack'd TODO: it would only be one packet as of now, but with a window the earliest may not be the last sent
                #log("RESENDING "+str(sorted(self.msg_buffer)))
                if len(self.msg_time)>0:
                    seq = sorted(self.msg_time)[0]
                    new_rtt =  time.time() - self.msg_time[seq] + 0.005 # TODO hardcoded sample added
                    self.rtt = self.estimate_rtt(self.rtt, new_rtt)

                if len(self.msg_buffer)==0:
                    self.load_next_packet(1)
                self.send_next_packet()
                #sys.exit(-1)
                #TODO adjust timeout with RTT

        sys.exit(0)

    def handle_data(self,data):
        try:
            decoded = json.loads(data)
            #need to make sure the third part of the handshake was registered
            #so that the last_sequence and msg_buff are initiated on the receiver
            # there's no way to know unless we get another syn back
            if 'syn' in decoded and not decoded['syn']:
                # this is a special case which requires special attention....
                # run til it succeeds
                while not self.handshake():
                    pass
                self.send_next_packet()
                return False
            elif 'fin' in decoded:
                log("receiver has received full message")
                return True
            elif 'nack' in decoded:
                log("PACKET FAILED CRC WITH SEQ#"+str(decoded['nack']))
                self.send_next_packet()
                return False
            # If there is an ack, send next packet
            seq = decoded['ack']
            log("[recv ack] " + str(seq))
            # Tracking duplicates for fast recovery
            if len(self.duptrack) == 2 and self.duptrack[0] == seq:
                self.duptrack[1] += 1
                # Fast retransmit
                if self.duptrack[1] == 3:
                    #TODO: retransmit
                    self.cwindow = int(round(float(self.ssthresh)/float(2)))
                    self.ssthresh
            else:
                self.duptrack = [seq, 1]
            # Slow Start
            if self.cwindow < self.ssthresh:
                self.cwindow += 1
            # Congestion avoidance
            else:
                self.cwindow += float(1)/float(math.floor(self.cwindow))
            new_rtt =  time.time() - self.msg_time[seq]
            self.rtt = self.estimate_rtt(self.rtt, new_rtt)
            self.msg_time.pop(seq)
            if len(self.msg_buffer) > 0:
                self.msg_buffer.pop() # Implemented as queue, but how to make sure we're not popping a different frame than with seq
            # self.msg_buffer.pop(seq)

            # Try to send next packet; break if no more data
            if len(self.msg_buffer)==0:
                loaded = self.load_next_packet(1)
            self.send_next_packet()
            return False
        except (ValueError, KeyError, TypeError) as e:
            log("[recv corrupt packet] "+str(e))
            # log(str(sorted(self.msg_buffer)))


if __name__=='__main__':

    sender = PacketSender()
    sender.start()
